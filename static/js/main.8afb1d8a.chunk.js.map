{"version":3,"sources":["utils/API.js","components/StreamerCard.js","components/Cards.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["API","getStreams","token","a","fetch","method","headers","process","req","json","resp","console","log","getNextPage","currentPage","StreamerCard","title","streamer","thumb","thumbnail","toString","replace","className","target","rel","href","src","alt","data-text","Cards","legacyStreams","id","length","map","stream","user_name","thumbnail_url","style","textAlign","App","URL","useState","setLegacyStreams","setCurrentPage","JSON","parse","localStorage","getItem","closed","setClosed","filter","setFilter","access_token","setToken","filterStreams","useCallback","streams","next","filtered","toLowerCase","includes","newStreams","Set","prevState","nextPage","undefined","data","pagination","cursor","setItem","stringify","useEffect","window","location","split","fetchOnScroll","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","innerHeight","scrollY","document","body","offsetHeight","onscroll","hideMessage","onClick","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8afb1d8a.chunk.js","sourcesContent":["export const API = {\r\n    getStreams: async function(token) {\r\n        try {\r\n            // mtg game id: 2748\r\n            const req = await fetch('https://api.twitch.tv/helix/streams?game_id=2748&first=100', {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${token}`,\r\n                    \"client-id\": process.env.REACT_APP_CLIENT_ID,\r\n                }\r\n            })\r\n            const resp = await req.json()\r\n            return resp\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    getNextPage: async function(token, currentPage) {\r\n        try {\r\n            const req = await fetch(`https://api.twitch.tv/helix/streams?game_id=2748&first=100&after=${currentPage}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${token}`,\r\n                    \"client-id\": process.env.REACT_APP_CLIENT_ID,\r\n                }\r\n            })\r\n            const resp = await req.json()\r\n            return resp\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import React from 'react'\r\n\r\nconst StreamerCard = ({ title, streamer, thumbnail }) => {\r\n    let thumb = thumbnail.toString().replace('{width}', '500').replace('{height}', '250')\r\n    return (\r\n        <div className='card'>\r\n            <div className=\"card-header\">\r\n                <h1>{streamer}</h1>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h2>{title}</h2>\r\n                <div className=\"img-link-container\">\r\n                    <a target='_blank' rel='noreferrer' href={`https://twitch.tv/${streamer}`}>\r\n                        <img src={thumb} alt={`${streamer}'s stream thumbnail`} />\r\n                        <span className=\"tooltip\" data-text={`click to open ${streamer}'s stream`}>\r\n                        </span>\r\n                    </a>\r\n                    <div className=\"spacer\"></div>\r\n                    <a className='link-button' rel='noreferrer' target='_blank' href={`https://twitch.tv/${streamer}`}>\r\n                        Go to {streamer}'s stream!\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StreamerCard\r\n","import React from 'react'\r\nimport StreamerCard from './StreamerCard'\r\n\r\nconst Cards = ({legacyStreams, token}) => {\r\n    return (\r\n        <div id='resp'>\r\n            {   legacyStreams?.length ?(\r\n                legacyStreams?.map(stream => {\r\n                    return <StreamerCard\r\n                        key={stream.id}\r\n                        title={stream.title}\r\n                        streamer={stream.user_name}\r\n                        thumbnail={stream.thumbnail_url}\r\n                    />\r\n\r\n                })\r\n                ) : (\r\n                    <p style={{textAlign: 'center'}}>{token ? `No live streamers at the moment. Try again later, or switch to a different format` : `Please login to view live streamers`}</p>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import { useState, useEffect, useCallback } from 'react'\nimport { API } from './utils/API'\n\nimport Cards from './components/Cards'\n\nfunction App() {\n  const responseType = 'token'\n  const redirectURI = process.env.NODE_ENV !== 'production' ? 'http://localhost:3000' : 'https://cobypear.github.io/twitch-mtg-legacy-finder'\n  const scopes = 'openid'\n  const claims = ''\n\n  const URL = `https://id.twitch.tv/oauth2/authorize?client_id=${process.env.REACT_APP_CLIENT_ID}&redirect_uri=${redirectURI}&response_type=${responseType}&scope=${scopes}&claims=${claims}&force_verify=true`\n\n  const [legacyStreams, setLegacyStreams] = useState([])\n  const [currentPage, setCurrentPage] = useState()\n  const [closed, setClosed] = useState(JSON.parse(localStorage.getItem('closed')) || false);\n  const [filter, setFilter] = useState(JSON.parse(localStorage.getItem('format')) || 'legacy')\n  const [access_token, setToken] = useState(JSON.parse(localStorage.getItem('access_token')) || '')\n\n  // filter streams based on the filter state\n  const filterStreams = useCallback(\n    (streams, next = false) => {\n      let filtered = streams?.filter(stream => stream.title.toLowerCase().includes(filter))\n      let newStreams = [...new Set(filtered)]\n      setLegacyStreams(prevState => {\n        return next ? [...prevState, ...newStreams] : [...newStreams]\n      })\n    },\n    [filter],\n  )\n\n  // call the API for the next page\n  const nextPage = useCallback(\n    async () => {\n      if (currentPage !== null && currentPage !== undefined) {\n        const { data, pagination } = await API.getNextPage(access_token, currentPage)\n        setCurrentPage(pagination.cursor)\n        localStorage.setItem('cursor', JSON.stringify(currentPage))\n        filterStreams(data, true)\n      }\n    }, [access_token, filterStreams, currentPage],\n  )\n  useEffect(() => {\n    let token = access_token || window.location.href.split('=')[1]?.split('&')[0]\n    setToken(token)\n    localStorage.setItem('access_token', JSON.stringify(token ? token : ''))\n\n  }, [access_token])\n\n  // load \n  useEffect(() => {\n    if (access_token) {\n      (async () => {\n        const { data, pagination } = await API.getStreams(access_token)\n        if (data && pagination) {\n          setCurrentPage(pagination?.cursor)\n          localStorage.setItem('cursor', JSON.stringify(currentPage))\n          filterStreams(data)\n        }\n      })()\n    }\n  }, [access_token, filter, filterStreams])\n\n\n  useEffect(() => {\n    // // debounce function via https://davidwalsh.name/javascript-debounce-function\n    const debounce = (func, wait, immediate) => {\n      var timeout;\n      return function () {\n        var context = this, args = arguments;\n        var later = function () {\n          timeout = null;\n          if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n      };\n    }\n\n    // fetch next page when scrollbar is at the bottom of the page\n    const fetchOnScroll = debounce(function () {\n      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200 ||\n        (window.innerHeight + window.scrollY === document.body.offsetHeight)) {\n        nextPage()\n      }\n    }, 100)\n    window.onscroll = fetchOnScroll\n  }, [currentPage, access_token, filter, filterStreams, nextPage])\n\n  const hideMessage = () => {\n    setClosed(!closed)\n    localStorage.setItem('closed', !closed)\n  }\n\n  return (\n    <div className='main-container' id='#top'>\n      <div className=\"row space-between\">\n        <button\n          id='filter-btn'\n          onClick={() => {\n            setFilter(filter === 'legacy' ? 'modern' : 'legacy')\n            localStorage.setItem('format', JSON.stringify(filter === 'legacy' ? 'modern' : 'legacy'))\n            // setCurrentPage('')\n          }}>\n          switch to {`${filter === 'legacy' ? 'modern' : 'legacy'}`}\n        </button>\n        <a className='link-button' id='login' href={URL}>Login</a>\n        {closed && <button id='show-message' onClick={hideMessage}>show message</button>}\n      </div>\n      {\n        !closed && (\n          <div className=\"row\">\n            <div className=\"message\" style={{ display: closed ? 'none' : 'inline-block' }}>\n              <div className='row'>\n                <button onClick={hideMessage}>x</button>\n              </div>\n              <h1>Welcome to Twitch M:tG Legacy Finder</h1>\n              <p className='italics'>How does it work?</p>\n              <p>1. Click Login to login to your Twitch account <a href=\"https://github.com/CobyPear/twitch-mtg-legacy-finder#question-why-do-i-need-to-login-to-twitch\" id='why'>Why do I need to do this?</a></p>\n              <p>2. Browse live Magic: the Gathering streamers currently playing the best (Legacy) format</p>\n              <a className='link-button' href={URL}>Login</a>\n            </div>\n          </div>\n        )\n      }\n      <div id='cards'>\n        {legacyStreams && <Cards legacyStreams={legacyStreams} token={access_token} />}\n      </div>\n      <button\n        id='to-top'\n        onClick={() => window.location = '#'}\n      >\n        ^\n      </button>\n      <div className=\"row\">\n        <button\n          id='load-more'\n          onClick={() => nextPage()}>\n          Load More\n      </button>\n      </div>\n\n      <footer id='footer'>\n        <span>&copy; <a href=\"https://cobysher.dev\">Coby Sher</a> 2021</span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}